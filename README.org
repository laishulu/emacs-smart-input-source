#+TITLE: README
[[https://melpa.org/#/smart-input-source][file:https://melpa.org/packages/smart-input-source-badge.svg]]

* About
This package provide several modes to switch OS-native or Emacs-native input
source smartly:

- A global mode: ~smart-input-source-global-respect-mode~ to respect buffer/mode
  by proper input source
  1. Respect start: start Emacs with specified language.
  2. Respect ~evil~: switch to English when leaving ~evil~ ~insert~ mode.
  3. Respect ~minibuffer~: switch to English when enter ~minibuffer~.
  4. Respect prefix key: switch to English for ~C-c~ / ~C-x~ / ~C-h~ and more.
  5. Respect buffer: recover buffer input source when it regain focus.
- A buffer local mode: ~smart-input-source-follow-context-mode~ to switch input
  source smarted according to context. It also has a global version
  ~smart-input-source-global-follow-context-mode~ to enable the mode for all
  buffers. When to switch input source by following context can be configured
  easily by a variable, whose default value indicates when entering evil insert
  mode.
- A buffer local mode: ~smart-input-source-inline-mode~ to enable the
  automatically triggering of a temporary overlay to input English/other
  language and then back to original input source without switching input
  sources manually. It also has a global version
  ~smart-input-source-global-inline-mode~ to enable the mode for all buffers.
- A global mode: ~smart-input-source-global-cursor-color-mode~ to automatically
  change cursor color according to current input source.

* Features
1. Ease the use of OS-native input source, no need to change use experience.
2. Ease the use of Emacs-native input source, for further compatibility. 
3. Support GUI Emacs, as well as Terminal Emacs.
4. Easy to install and configure. No further configuration for
   ~GUI Emacs Mac Port~ with ~Sogou Input~.
5. Automatically change cursor color according to current input source.
6. Respect buffer/mode by proper input source:
   1) Respect start: start Emacs with specified language.
   2) Respect ~evil~: switch to English when leaving ~evil~ ~insert~ mode.
   3) Respect ~minibuffer~: switch to English when enter ~minibuffer~.
   4) Respect prefix key: switch to English for ~C-c~ / ~C-x~ / ~C-h~ and more.
   5) Respect buffer: recover buffer input source when it regain focus.
7. Support ~inline English~ and ~inline other language~ region. Features of the
   inline region (~inline english~ as an example):
   1) Inserting space around none-English characters triggers the region (two
      consecutive spaces for ~inline other language~ region).
   2) In this mode, English will be sticked.
   3) Region is closed when:
      a. Cursor leaves the region
      b. ~Return~ is pressed.
      c. Two consecutive ~space~ are input (can be configured to one ~space~).
   4) If the region ends with space, none-English input source will be
      selected, otherwise English input source is retained.
   5) After the close of the region, one space (can be configured) in the head
      and tail respectively (if exists) of the region will be deleted. But if
      the whole region is blank, the no character will be deleted.
8. Switch input source according to context:
   1) Pre-configured for entering evil insert mode.
   2) For native emacs user, you can configure by easily set a variable.
9. Input source switching rules are designed carefully, for pure English
   editing, input source will never be switched to other languages.

* Install
Just install ~smart-input-source~ from ~melpa~.

* Prepare /input source manager (ISM)/
** Emacs-native input method
Any Emacs-native input method can be configured in the same way, here uses
~rime~ as an example:
#+BEGIN_SRC lisp
(setq-default smart-input-source-english nil)
(setq-default smart-input-source-other "rime")
(setq-default smart-input-source-do-get (lambda() current-input-method))
(setq-default smart-input-source-do-set (lambda(source) (set-input-method source)))
#+END_SRC

If you just want to toggle default input method, configure like this:
#+BEGIN_SRC lisp
;;(setq-default default-input-method "rime")
(setq-default smart-input-source-english nil)
(setq-default smart-input-source-other default-input-method)
(setq-default smart-input-source-do-get (lambda() current-input-method))
(setq-default smart-input-source-do-set
              (lambda(source)
                (unless (equal source current-input-method)
                  (toggle-input-method))))
#+END_SRC


** MacOS
The default MacOS input sources are shown in the following.
#+BEGIN_SRC lisp
;; set the english input source
;;(setq-default smart-input-source-english "com.apple.keylayout.ABC")
(setq-default smart-input-source-english "com.apple.keylayout.US")
;; set the default other language input source for all buffer
(setq-default smart-input-source-other "com.sogou.inputmethod.sogou.pinyin")
#+END_SRC

Note:
1. Your English input source *MAY NOT* be the default one. Use command
   ~smart-input-source-get~ in Emacs to get the correct one.
2. According to your use case, ~EMP~ or ~macism~ should be installed.

*** GUI Emacs Mac Port (EMP)
EMP is a Emacs distribution enhanced for MacOS. It has builtin native API to
interact with MacOS input sources efficiently. EMP can be installed by the
following commands:
#+BEGIN_SRC bash
brew tap railwaycat/emacsmacport
brew install emacs-mac --with-modules --with-rsvg --with-imagemagick --with-natural-title-bar
#+END_SRC

*** ~macism~
If your Emacs is not GUI EMP, the pre-configured ~macism~ should be installed.
#+BEGIN_SRC bash
brew tap laishulu/macism
brew install macism
#+END_SRC
Note:
- The first time when you use ~macism SOME_INPUT_SOURCE_ID~ in your app,
  MacOS will popup a window asking you to grant permission of Accessibility, you
  can also grant the permission manually following the instructions in [[https://github.com/laishulu/macism/][macism]].
- On a slow computer, ~macism~ needs sleep time (in micro seconds) longer than
  default to work with Accessibility. The default can be overwritten by the
  following codes.
  #+BEGIN_SRC lisp
  (setq-default smart-input-source-do-set
                (lambda(source) (start-process "set-input-source" nil "macism" source "50000")))
  #+END_SRC
- Don't use ~Alacritty~ for TUI Emacs, because it can't handle deleting
  as well as ~Option~ and ~Command~ key properly when input method is on. I just
  recommend ~kitty~ until ~Alacirtty~ fixed those long existing bugs.
- If you have problems on granting permission of Accessibility for Emacs, see
  below:
  #+BEGIN_QUOTE
  Some Emacs "distributions" package together a number of Emacs binaries for
  various macOS versions in a single folder, and dynamically at runtime chooses
  the right one for your system. This means that the icon you click to start the
  program is really a "placeholder" that is not Emacs itself, but rather just
  starts up Emacs. This "placeholder" often takes the form of a Ruby script. If
  this is the case, you'll need to drag the Ruby program on to the list. Ruby
  comes with macOS by default. You can find the program by opening Finder, and
  then from the "Go" menu choose "Go to Folder". Enter "/usr/bin" and you'll get
  that folder opened in Finder. In the folder, you'll find the ruby program that
  you can drag on to the Accessibility list.
  #+END_QUOTE

** Microsoft Windows
*** ~im-select~
[[https://github.com/daipeihust/im-select][im-select]] can be used as a drop-in replacement of ~macism~ in Microsoft Windows.
#+BEGIN_SRC lisp
(setq-default smart-input-source-external-ism "im-select.exe")
;; 1033 is for English
(setq-default smart-input-source-english "1033")
;; 2052 is for Chinese
(setq-default smart-input-source-other "2052")
#+END_SRC

However, because even though ~im-select~ supports switching different input
languages, it does not support multiple input methods in the same lanuage,
thus you should ensure that in each input language there is only one input
method, just like the following screenshot.

#+CAPTION: Smart input source
[[./screenshots/windows-im-select.jpg]]

** Linux
*** ~fcitx~
~fcitx-remote~ can be used for ~fcitx~:
#+BEGIN_SRC lisp
(require 'subr-x)
(setq-default smart-input-source-english "1")
(setq-default smart-input-source-other "2")
(setq-default smart-input-source-do-get
      (lambda()
        (let ((default-directory "~"))
          (string-trim (shell-command-to-string "fcitx-remote")))))
(setq-default smart-input-source-do-set
      (lambda(source)
        (pcase source
          ("1" (start-process "set-input-source" nil "fcitx-remote" "-c"))
          ("2" (start-process "set-input-source" nil "fcitx-remote" "-o")))))
#+END_SRC

*** ~ibus~
#+BEGIN_SRC lisp
(require 'subr-x)
(setq-default smart-input-source-english "xkb:us::eng")
(setq-default smart-input-source-other "OTHER_INPUT_SOURCE")
(setq-default smart-input-source-do-get
      (lambda()
        (let ((default-directory "~"))
          (string-trim (shell-command-to-string "ibus engine")))))
(setq-default smart-input-source-do-set
      (lambda(source) (start-process "set-input-source" nil "ibus" "engine" source)))
#+END_SRC

** Internals for external ISM
- If you have a ISM ~YOUR_ISM~:
  + Run ~YOUR_ISM~ will output the current input source
  + Run ~YOUR_ISM INPUT_SOURCE_ID~ will select ~INPUT_SOURCE_ID~.

  Then you can simply configure the ISM
  #+BEGIN_SRC lisp
  (setq-default smart-input-source-external-ism "YOUR_ISM")
  #+END_SRC
- The most flexible way to specify ISM is defining the following functions:
  #+BEGIN_SRC lisp
  (setq-default smart-input-source-do-get
        #'YOUR_DO_GET_INPUT_SOURCE_FUNCTION)
  (setq-default smart-input-source-do-set
        #'YOUR_DO_SET_INPUT_SOURCE_FUNCTION)
  #+END_SRC
  
* Configure
The mode is designed carefully, so it's safe to enable for all buffers even
its all in English.

#+BEGIN_SRC lisp
(use-package smart-input-source
  :init
  ;; set the english input source
  ;;(setq-default smart-input-source-english "com.apple.keylayout.ABC")
  (setq-default smart-input-source-english "com.apple.keylayout.US")
  ;; set the default other language input source for all buffer
  (setq-default smart-input-source-other "com.sogou.inputmethod.sogou.pinyin")

  ;; :hook
  ;; enable the /follow context/ and /inline region/ mode for specific buffers
  ;; (((text-mode prog-mode) . smart-input-source-follow-context-mode)
  ;;  ((text-mode prog-mode) . smart-input-source-inline-mode))

  :config
  ;; enable the /cursor color/ mode
  (smart-input-source-global-cursor-color-mode t)
  ;; enable the /respect/ mode
  (smart-input-source-global-respect-mode t)
  ;; enable the /follow context/ mode for all buffers
  (smart-input-source-global-follow-context-mode t)
  ;; enable the /inline english/ mode for all buffers
  (smart-input-source-global-inline-mode t)
  )
#+END_SRC

Tips:
1. For ~spacemacs~ user, if you config it with the ~hybrid~ mode, Some of the
   ~evil~ related features may not work. Change it to ~vim~ mode instead.
2. If you want to change the default value of a *buffer local* variable for all
   buffers, you should use ~setq-default~ rather than ~setq~.

**  Default behavior for /inline english mode/ and /follow context mode/
You can change some of the behaviors by configuring related variables, note:
~inline other language~ feature is turned off by default.
#+CAPTION: Smart Input Source
[[./screenshots/smart-input-source.png]]

* Variables and commands
** About input source
| Variable                                  | Buffer | Description                                        | Default                              |
|-------------------------------------------+--------+----------------------------------------------------+--------------------------------------|
| ~smart-input-source-english~              | no     | Input source for English                           | ~com.apple.keylayout.US~             |
| ~smart-input-source-other~                | yes    | Input source for other language                    | ~com.sogou.inputmethod.sogou.pinyin~ |
| ~smart-input-source-external-ism~         | no     | External input resource manager                    | ~macism~                             |
| ~smart-input-source-do-get~               | no     | Function to get the current input source           | determined from the environment      |
| ~smart-input-source-do-set~               | no     | Function to set the input source                   | determined from the environment      |
| ~smart-inpu-source-change-hook~           | no     | Hook to run after input source changes             | ~nil~                                |
| ~smart-input-source-auto-refresh-seconds~ | no     | Idle interval to auto refresh input source from OS | ~0.2~, ~nil~ to disable              |
|-------------------------------------------+--------+----------------------------------------------------+--------------------------------------|

Note:
- To save energy, actual interval to refresh input source from OS in a long idle
  period is increased automatically.

| Command Name                     | Description                                                |
|----------------------------------+------------------------------------------------------------|
| ~smart-input-source-get~         | Get the input source                                       |
| ~smart-input-source-set-english~ | Set the input source to English                            |
| ~smart-input-source-set-other~   | Set the input source to other language                     |
| ~smart-input-source-switch~      | Switch the input source between English and other language |
|----------------------------------+------------------------------------------------------------|

** About /cursor color mode/
| Variable                                  | Buffer | Description                                            | Default                  |
|-------------------------------------------+--------+--------------------------------------------------------+--------------------------|
| ~smart-input-source-default-cursor-color~ | no     | Default cursor color, also used for English            | ~nil~ (from envrionment) |
| ~smart-input-source-other-cursor-color~   | no     | Cursor color for other input source                    | ~green~                  |
|-------------------------------------------+--------+--------------------------------------------------------+--------------------------|

** About /respect mode/
| Variable                                                       | Buffer | Description                                        | Default                |
|----------------------------------------------------------------+--------+----------------------------------------------------+------------------------|
| ~smart-input-source-respect-start~                             | no     | Switch to specific input source when mode enabled  | ~'english~             |
| ~smart-input-source-respect-evil-normal-escape~                | no     | esc to English from evil normal sate               | ~t~                    |
| ~smart-input-source-respect-prefix-and-buffer~                 | no     | Handle prefix key and buffer                       | ~t~                    |
| ~smart-input-source-prefix-override-keys~                      | no     | Prefix keys to be respected                        | ~'("C-c" "C-x" "C-h")~ |
| ~smart-input-source-prefix-override-recap-triggers~            | no     | Functions trigger the recap of the prefix override | see variable doc       |
| ~smart-input-source-prefix-override-buffer-disable-predicates~ | no     | Predicates on buffers to disable prefix overriding | see variable doc       |
|----------------------------------------------------------------+--------+----------------------------------------------------+------------------------|

** About language pattern
| Variable                             | Buffer | Description                                    | Default                  |
|--------------------------------------+--------+------------------------------------------------+--------------------------|
| ~smart-input-source-english-pattern~ | no     | Pattern to identify a character as English     | ~[a-zA-Z]~               |
| ~smart-input-source-other-pattern~   | yes    | Pattern to identify a character as other       | ~\cc~ , see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Backslash.html][emacs manual]] |
| ~smart-input-source-blank-pattern~   | yes    | Pattern to identify a character as blank       | ~[:blank:]~              |
|--------------------------------------+--------+------------------------------------------------+--------------------------|

** About /follow context mode/
| Variable                                            | Buffer | Description                                    | Default          |
|-----------------------------------------------------+--------+------------------------------------------------+------------------|
| ~smart-input-source-follow-context-contxt~          | yes    | Context is fixed to a specific language        | ~nil~            |
| ~smart-input-source-follow-context-aggressive-line~ | yes    | Aggressively detect context across blank lines | ~t~              |
| ~smart-input-source-follow-context-hooks~           | no     | Hooks trigger the context following            | see variable doc |
|-----------------------------------------------------+--------+------------------------------------------------+------------------|

** About /inline mode/

| Face Name                                      | Buffer | Description                                                | Default |
|------------------------------------------------+--------+------------------------------------------------------------+---------|
| ~smart-input-source-inline-face~               | no     | Face for the inline region overlay                         |         |
| ~smart-input-source-inline-not-max-point~      | no     | Insert new line when the whole buffer ends with the region | ~t~     |
| ~smart-input-source-inline-tighten-head-rule~  | yes    | Rule to delete the head spaces                             | ~1~     |
| ~smart-input-source-inline-tighten-tail-rule~  | yes    | Rule to delete the tail spaces                             | ~1~     |
| ~smart-input-source-inline-single-space-close~ | yes    | 1 space to close the region, default is 2 spaces/return    | ~t~     |
| ~smart-input-source-inline-with-english~       | yes    | enable the ~inline english~ region feature                 | ~t~     |
| ~smart-input-source-inline-with-other~         | yes    | enable the ~inline other language~ region feature          | ~nil~   |
|------------------------------------------------+--------+------------------------------------------------------------+---------|

* How to
**  How to get the input source id
After /input source manager/ is configured, you can get your /current
input source id/ by the command ~smart-input-source-get~.

**  How the package know the input source change.
1. If your input source is switched from ~smart-input-source~, then everything
   should be OK naturally. And your ~smart-input-source-auto-refresh-seconds~
   can even be set to ~nil~.
2. If your input source is switched from OS, to detect the switch timely,
   ~smart-input-source-auto-refresh-seconds~ should not be too large.
3. To save energy, if the input source is switched from OS during a long idle
   period of Emacs, the package won't be aware in time. Then you can manually
   inform the package by doing anything in Emacs to exit the long idle period,
   or invoke the command ~smart-input-source-get~ directly.
